"use client";

import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabase";
import { formatCurrency, formatDate, ensureUserProfile } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { 
  PlusCircle, 
  Calendar, 
  Edit2, 
  Trash2, 
  Search, 
  ChevronLeft, 
  ChevronRight,
  Download,
  Filter,
  ArrowUpCircle,
  ArrowDownCircle
} from "lucide-react";

interface Transaction {
  id: string;
  user_id: string;
  type: "income" | "expense";
  category_id: string;
  category_name?: string;
  amount: number;
  description: string;
  date: string;
  created_at: string;
}

interface Category {
  id: string;
  name: string;
  icon?: string;
  user_id?: string;
  type: 'income' | 'expense' | 'both';
}

interface TransactionSummary {
  totalIncome: number;
  totalExpense: number;
  balance: number;
}

export default function TransactionsPage() {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [formLoading, setFormLoading] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editId, setEditId] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    type: "expense" as "income" | "expense",
    category_id: "",
    amount: "",
    description: "",
    date: new Date().toISOString().split("T")[0],
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("all");
  const [dateRange, setDateRange] = useState<{
    start: string;
    end: string;
  }>({
    start: "",
    end: "",
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [summary, setSummary] = useState<TransactionSummary>({
    totalIncome: 0,
    totalExpense: 0,
    balance: 0
  });
  const [sortField, setSortField] = useState<string>("date");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");

  const fetchTransactions = async () => {
    setLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data, error } = await supabase
        .from("transactions")
        .select(`
          *,
          categories:category_id (
            name,
            icon
          )
        `)
        .eq("user_id", userData.user.id)
        .order("date", { ascending: false });

      if (error) throw error;

      const processedData = data?.map(transaction => ({
        ...transaction,
        category_name: transaction.categories?.name || 'Uncategorized'
      }));

      setTransactions(processedData || []);
      calculateSummary(processedData || []);
    } catch (error) {
      console.error("Error fetching transactions:", error);
    } finally {
      setLoading(false);
    }
  };

  const calculateSummary = (transactionsData: Transaction[]) => {
    const summary = transactionsData.reduce((acc, transaction) => {
      if (transaction.type === "income") {
        acc.totalIncome += transaction.amount;
      } else {
        acc.totalExpense += transaction.amount;
      }
      return acc;
    }, {
      totalIncome: 0,
      totalExpense: 0,
      balance: 0
    });
    
    summary.balance = summary.totalIncome - summary.totalExpense;
    setSummary(summary);
  };

  const fetchCategories = async () => {
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data, error } = await supabase
        .from("categories")
        .select("*")
        .or(`user_id.is.null,user_id.eq.${userData.user.id}`)
        .eq('is_active', true)
        .order("name");

      if (error) throw error;
      setCategories(data || []);
    } catch (error) {
      console.error("Error fetching categories:", error);
    }
  };

  useEffect(() => {
    fetchCategories();
    fetchTransactions();
  }, []);

  const resetForm = () => {
    setFormData({
      type: "expense",
      category_id: "",
      amount: "",
      description: "",
      date: new Date().toISOString().split("T")[0],
    });
    setIsEditing(false);
    setEditId(null);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormLoading(true);
    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        alert("User session expired. Please login again.");
        return;
      }

      const amount = parseFloat(formData.amount);
      if (isNaN(amount) || amount <= 0) {
        alert("Please enter a valid amount");
        return;
      }

      if (!formData.category_id) {
        alert("Please select a category");
        return;
      }

      const profileExists = await ensureUserProfile(
        userData.user.id, 
        userData.user.email, 
        userData.user.user_metadata?.name
      );
      
      if (!profileExists) {
        alert("Could not verify your user profile. Please try again or contact support.");
        return;
      }

      if (isEditing && editId) {
        const { error } = await supabase
          .from("transactions")
          .update({
            type: formData.type,
            category_id: formData.category_id,
            amount,
            description: formData.description,
            date: formData.date,
          })
          .eq("id", editId)
          .eq("user_id", userData.user.id);

        if (error) {
          console.error("Transaction update error:", error);
          alert(`Failed to update transaction: ${error.message}`);
          return;
        }
      } else {
        const { error } = await supabase.from("transactions").insert([
          {
            user_id: userData.user.id,
            type: formData.type,
            category_id: formData.category_id,
            amount,
            description: formData.description,
            date: formData.date,
          },
        ]);

        if (error) {
          console.error("Transaction insert error:", error);
          alert(`Failed to save transaction: ${error.message}`);
          return;
        }
      }

      await fetchTransactions();
      resetForm();
      setShowForm(false);
    } catch (error: any) {
      console.error("Error saving transaction:", error);
      alert(`Failed to save transaction: ${error.message || "Unknown error"}`);
    } finally {
      setFormLoading(false);
    }
  };

  const handleEdit = (transaction: Transaction) => {
    setFormData({
      type: transaction.type,
      category_id: transaction.category_id,
      amount: transaction.amount.toString(),
      description: transaction.description,
      date: transaction.date,
    });
    setIsEditing(true);
    setEditId(transaction.id);
    setShowForm(true);
  };

  const handleDelete = async (id: string) => {
    if (!confirm("Are you sure you want to delete this transaction?")) return;

    try {
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { error } = await supabase
        .from("transactions")
        .delete()
        .eq("id", id)
        .eq("user_id", userData.user.id);

      if (error) throw error;
      await fetchTransactions();
    } catch (error) {
      console.error("Error deleting transaction:", error);
      alert("Failed to delete transaction");
    }
  };

  const handleSort = (field: string) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  const sortTransactions = (transactions: Transaction[]) => {
    return [...transactions].sort((a, b) => {
      let compareA, compareB;
      
      if (sortField === 'date') {
        compareA = new Date(a.date).getTime();
        compareB = new Date(b.date).getTime();
      } else if (sortField === 'amount') {
        compareA = a.amount;
        compareB = b.amount;
      } else if (sortField === 'category') {
        compareA = a.category_name?.toLowerCase() || '';
        compareB = b.category_name?.toLowerCase() || '';
      } else {
        compareA = a.description.toLowerCase();
        compareB = b.description.toLowerCase();
      }
      
      if (sortDirection === 'asc') {
        return compareA > compareB ? 1 : -1;
      } else {
        return compareA < compareB ? 1 : -1;
      }
    });
  };

  const filteredTransactions = transactions.filter((transaction) => {
    if (filterType !== "all" && transaction.type !== filterType) return false;

    if (
      searchTerm &&
      !transaction.category_name?.toLowerCase().includes(searchTerm.toLowerCase()) &&
      !transaction.description.toLowerCase().includes(searchTerm.toLowerCase())
    )
      return false;

    if (dateRange.start && new Date(transaction.date) < new Date(dateRange.start))
      return false;
    if (dateRange.end && new Date(transaction.date) > new Date(dateRange.end))
      return false;

    return true;
  });

  const sortedTransactions = sortTransactions(filteredTransactions);
  
  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentTransactions = sortedTransactions.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(sortedTransactions.length / itemsPerPage);

  const paginate = (pageNumber: number) => {
    setCurrentPage(pageNumber);
  };

  const exportToCSV = () => {
    // Create CSV content
    const headers = ['Date', 'Type', 'Category', 'Description', 'Amount'];
    const csvContent = [
      headers.join(','),
      ...filteredTransactions.map(t => [
        formatDate(t.date),
        t.type,
        t.category_name,
        `"${t.description.replace(/"/g, '""')}"`, // Escape quotes
        t.amount
      ].join(','))
    ].join('\n');
    
    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `transactions_${new Date().toISOString().slice(0,10)}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading && transactions.length === 0) {
    return (
      <div className="flex h-[calc(100vh-4rem)] items-center justify-center">
        <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 md:p-6">
      <div className="mb-6 flex flex-col justify-between gap-4 sm:flex-row sm:items-center">
        <h1 className="text-2xl font-bold md:text-3xl">Transactions</h1>
        <div className="flex gap-2">
          <Button 
            onClick={exportToCSV} 
            variant="outline" 
            size="sm"
            className="flex items-center gap-1"
          >
            <Download size={16} />
            <span className="hidden sm:inline">Export</span>
          </Button>
          <Button 
            onClick={() => setShowForm(!showForm)}
            className="flex items-center gap-1"
          >
            {showForm ? "Cancel" : (
              <>
                <PlusCircle size={16} />
                <span>Add Transaction</span>
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="mb-6 grid grid-cols-1 gap-4 sm:grid-cols-3">
        <div className="rounded-lg border bg-card p-4 shadow-sm">
          <h3 className="mb-1 text-sm font-medium text-muted-foreground">Total Income</h3>
          <p className="text-xl font-bold text-green-600 dark:text-green-400">
            {formatCurrency(summary.totalIncome)}
          </p>
        </div>
        <div className="rounded-lg border bg-card p-4 shadow-sm">
          <h3 className="mb-1 text-sm font-medium text-muted-foreground">Total Expenses</h3>
          <p className="text-xl font-bold text-red-600 dark:text-red-400">
            {formatCurrency(summary.totalExpense)}
          </p>
        </div>
        <div className="rounded-lg border bg-card p-4 shadow-sm">
          <h3 className="mb-1 text-sm font-medium text-muted-foreground">Balance</h3>
          <p className={`text-xl font-bold ${summary.balance >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
            {formatCurrency(summary.balance)}
          </p>
        </div>
      </div>

      {showForm && (
        <div className="mb-6 rounded-lg border bg-card p-4 shadow-sm">
          <h2 className="mb-4 text-xl font-semibold">
            {isEditing ? "Edit Transaction" : "Add New Transaction"}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <div>
                <label htmlFor="transaction-type" className="mb-2 block text-sm font-medium">Type</label>
                <select
                  id="transaction-type"
                  name="type"
                  value={formData.type}
                  onChange={handleInputChange}
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  disabled={formLoading}
                >
                  <option value="expense">Expense</option>
                  <option value="income">Income</option>
                </select>
              </div>

              <div>
                <label htmlFor="transaction-category" className="mb-2 block text-sm font-medium">Category</label>
                <select
                  id="transaction-category"
                  name="category_id"
                  value={formData.category_id}
                  onChange={handleInputChange}
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  required
                  disabled={formLoading}
                >
                  <option value="">Select a category</option>
                  {categories
                    .filter(category => category.type === formData.type || category.type === 'both')
                    .map((category) => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                </select>
              </div>

              <div>
                <label htmlFor="transaction-amount" className="mb-2 block text-sm font-medium">Amount</label>
                <input
                  id="transaction-amount"
                  type="number"
                  name="amount"
                  min="0.01"
                  step="0.01"
                  value={formData.amount}
                  onChange={handleInputChange}
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  placeholder="0.00"
                  required
                  disabled={formLoading}
                />
              </div>

              <div>
                <label htmlFor="transaction-date" className="mb-2 block text-sm font-medium">Date</label>
                <div className="relative">
                  <input
                    id="transaction-date"
                    type="date"
                    name="date"
                    value={formData.date}
                    onChange={handleInputChange}
                    className="w-full rounded-md border border-input bg-background px-3 py-2 pr-10"
                    required
                    disabled={formLoading}
                  />
                  <Calendar className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                </div>
              </div>

              <div className="md:col-span-2">
                <label htmlFor="transaction-description" className="mb-2 block text-sm font-medium">Description</label>
                <textarea
                  id="transaction-description"
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  className="w-full rounded-md border border-input bg-background px-3 py-2"
                  placeholder="Transaction description"
                  rows={2}
                  disabled={formLoading}
                ></textarea>
              </div>
            </div>

            <div className="flex justify-end gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  resetForm();
                  setShowForm(false);
                }}
                disabled={formLoading}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={formLoading}>
                {formLoading ? (
                  <><div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent"></div>{isEditing ? "Updating..." : "Saving..."}</>
                ) : (
                  isEditing ? "Update" : "Save"
                )}
              </Button>
            </div>
          </form>
        </div>
      )}

      {/* Filters */}
      <div className="mb-6 rounded-lg border bg-card p-4 shadow-sm">
        <div className="mb-2 flex items-center">
          <Filter size={16} className="mr-2 text-muted-foreground" />
          <h3 className="font-medium">Filters</h3>
        </div>
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3">
          <div>
            <label htmlFor="filter-type" className="mb-2 block text-sm font-medium">Type</label>
            <select
              id="filter-type"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="w-full rounded-md border border-input bg-background px-3 py-2"
            >
              <option value="all">All Types</option>
              <option value="income">Income</option>
              <option value="expense">Expense</option>
            </select>
          </div>

          <div>
            <label htmlFor="search-term" className="mb-2 block text-sm font-medium">Search</label>
            <div className="relative">
              <input
                id="search-term"
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full rounded-md border border-input bg-background px-3 py-2 pr-10"
                placeholder="Search by category or description"
              />
              <Search className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            </div>
          </div>

          <div>
            <label className="mb-2 block text-sm font-medium">Date Range</label>
            <div className="grid grid-cols-1 gap-2 sm:grid-cols-2">
              <div className="relative">
                <input
                  type="date"
                  value={dateRange.start}
                  onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
                  className="w-full rounded-md border border-input bg-background px-3 py-2 pr-10"
                  aria-label="Start date"
                  placeholder="Start date"
                />
                <Calendar className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              </div>
              <div className="relative">
                <input
                  type="date"
                  value={dateRange.end}
                  onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
                  className="w-full rounded-md border border-input bg-background px-3 py-2 pr-10"
                  aria-label="End date"
                  placeholder="End date"
                />
                <Calendar className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Transactions List */}
      <div className="rounded-lg border bg-card shadow-sm">
        {filteredTransactions.length === 0 ? (
          <div className="p-6 text-center">
            <p className="text-lg text-muted-foreground">No transactions found.</p>
            <p className="mt-2 text-sm text-muted-foreground">
              {transactions.length > 0
                ? "Try adjusting your filters."
                : "Add your first transaction to get started."}
            </p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b bg-muted/50">
                  <th 
                    className="px-4 py-3 text-left text-sm font-medium cursor-pointer"
                    onClick={() => handleSort('date')}
                  >
                    <div className="flex items-center">
                      Date
                      {sortField === 'date' && (
                        <span className="ml-1">{sortDirection === 'asc' ? '↑' : '↓'}</span>
                      )}
                    </div>
                  </th>
                  <th 
                    className="px-4 py-3 text-left text-sm font-medium cursor-pointer"
                    onClick={() => handleSort('category')}
                  >
                    <div className="flex items-center">
                      Category
                      {sortField === 'category' && (
                        <span className="ml-1">{sortDirection === 'asc' ? '↑' : '↓'}</span>
                      )}
                    </div>
                  </th>
                  <th 
                    className="px-4 py-3 text-left text-sm font-medium cursor-pointer"
                    onClick={() => handleSort('description')}
                  >
                    <div className="flex items-center">
                      Description
                      {sortField === 'description' && (
                        <span className="ml-1">{sortDirection === 'asc' ? '↑' : '↓'}</span>
                      )}
                    </div>
                  </th>
                  <th 
                    className="px-4 py-3 text-right text-sm font-medium cursor-pointer"
                    onClick={() => handleSort('amount')}
                  >
                    <div className="flex items-center justify-end">
                      Amount
                      {sortField === 'amount' && (
                        <span className="ml-1">{sortDirection === 'asc' ? '↑' : '↓'}</span>
                      )}
                    </div>
                  </th>
                  <th className="px-4 py-3 text-right text-sm font-medium">Actions</th>
                </tr>
              </thead>
              <tbody>
                {currentTransactions.map((transaction) => (
                  <tr key={transaction.id} className="border-b hover:bg-muted/30">
                    <td className="whitespace-nowrap px-4 py-3 text-sm">
                      {formatDate(transaction.date)}
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <span
                        className={`inline-flex items-center gap-1 rounded px-2 py-1 text-xs font-medium ${
                          transaction.type === "income"
                            ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                            : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                        }`}
                      >
                        {transaction.type === "income" ? (
                          <ArrowUpCircle size={12} />
                        ) : (
                          <ArrowDownCircle size={12} />
                        )}
                        {transaction.category_name}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      {transaction.description || <span className="text-muted-foreground italic">No description</span>}
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-right text-sm font-medium">
                      <span
                        className={
                          transaction.type === "income" ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"
                        }
                      >
                        {transaction.type === "income" ? "+" : "-"}
                        {formatCurrency(transaction.amount)}
                      </span>
                    </td>
                    <td className="whitespace-nowrap px-4 py-3 text-right text-sm">
                      <button
                        onClick={() => handleEdit(transaction)}
                        className="mx-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                        aria-label="Edit transaction"
                      >
                        <Edit2 size={16} />
                      </button>
                      <button
                        onClick={() => handleDelete(transaction.id)}
                        className="mx-1 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                        aria-label="Delete transaction"
                      >
                        <Trash2 size={16} />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between border-t p-4">
                <div className="text-sm text-muted-foreground">
                  Showing {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, filteredTransactions.length)} of {filteredTransactions.length} transactions
                </div>
                <div className="flex gap-1">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => paginate(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                  >
                    <ChevronLeft size={16} />
                  </Button>
                  {Array.from({ length: totalPages }).map((_, index) => {
                    // Display limited page buttons with ellipsis for large number of pages
                    if (
                      totalPages <= 5 ||
                      index === 0 ||
                      index === totalPages - 1 ||
                      (index >= currentPage - 2 && index <= currentPage)
                    ) {
                      return (
                        <Button
                          key={index}
                          variant={currentPage === index + 1 ? "default" : "outline"}
                          size="sm"
                          onClick={() => paginate(index + 1)}
                          className="h-8 w-8 p-0"
                        >
                          {index + 1}
                        </Button>
                      );
                    } else if (
                      (index === 1 && currentPage > 3) ||
                      (index === totalPages - 2 && currentPage < totalPages - 2)
                    ) {
                      return <span key={index} className="px-2">...</span>;
                    }
                    return null;
                  })}
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => paginate(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                  >
                    <ChevronRight size={16} />
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}